
视图是关系数据库提供给用户以多种角度观察数据库中数据的重要机制。视图是从一个或几个基本表(或视图)导出的表，它与基本表不同，是一个虚表。数据库中只存放视图的定义，而不存放视图对应的数据，这些数据仍存放在原来的基本表中。所以基本表中的数据发生变化，从视图中查询出的数据也就随之改变了。从这个意义上讲，视图就像是一个窗口，透过它可以看到数据库中自己感兴趣的数据及其变化。视图一经定义，就可以和基本表一样被查询、被删除，我们也可以在一个视图之上再定义新的视图，但对视图的更新(增加、删除、修改)操作则有一定的限制。

对于经常执行的固定查询，可通过把查询变为视图（VIEW）的方式把查询存储在数据库内。

1，创建视图

创建视图语法（AS不可省略）如下：
CREATE VIEW my_view AS
	SELECT * FROM my_table WHERE ...;
	
DBMS执行CREATE VIEW语句的结果只是把视图的定义存入数据字典，并不执行其中的SELECT语句。只是在对视图查询时，才按视图的定义从基本表中将数据查出。定义基本表时，为了减少数据库中的冗余数据，表中只存放基本数据，由基本数据经过各种计算派生出的数据一般是不存储的。但由于视图中的数据并不实际存储，所以定义视图时可以根据应用的需要，设置一些派生属性列。这些派生属性由于在基本表中并不实际存在也称它们为虚拟列。


2，查询视图

查看视图语法如下：
SELECT * FROM my_view;

DBMS执行对视图的查询时，首先进行有效性检查，检查查询的表、视图等是否存在。如果存在，则从数据字典中取出视图的定义，把定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询，然后再执行修正了的查询，这一转换过程称为视图消解(view resolution)。


3，删除视图

可以把视图想象成一张表，实际上它是一张虚拟表。也可以利用视图进行插入、更新和删除的操作，但一般不这样使用。如果像删除视图可以使用
DROP VIEW my_view;

视图删除后视图的定义将从数据字典中删除。但是由该视图导出的其他视图定义仍在数据字典中，不过该视图已失效。用户使用时会出错，要用DROP VIEW语句将它们一一删除。就像基本表删除后，由该基本表导出的所有视图(定义)没有被删除，但均无法使用了。删除这些视图需要显示的使用DROP VIEW语句。


视图的作用
1，视图能够简化用户的操作
视图机制使用户可以讲注意力集中在所关心的数据上。如果这些数据不是直接来自基本表，则可以通过定义视图，使数据库看起来结构简单、清晰，并且可以简化用户的数据查询操作。
2，视图使用户能以多种角度看待同一数据
视图机制能使不同的用户以不同的方式看待同一数据，当许多不同种类的用户共享同一个数据库时，这种灵活性是非常重要的。
3，视图对重构数据库提供了一定程度的逻辑独立性
4，视图能够对机密数据提供安全保护
有了视图机制，就可以在设计数据库应用系统时，对不同的用户定义不同的视图，使机密数据不出现在不应看到这些数据的用户视图上，这样视图机制就自动提供了对机密数据的安全保护功能。
