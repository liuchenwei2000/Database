
数据库完整性


数据的完整性和安全性是两个不同的概念。前者是为了防止数据库中存在不符合语义的数据，防止错误信息的输入和输出，即所谓垃圾进垃圾出所造成的无效操作和错误结果。而后者是保护数据库防止恶意的破坏和非法的存取。也就是说，安全性措施的防范对象是非法用户和非法操作，完整性措施的防范对象是不合语义的数据。当然，完整性和安全性是密切相关的。

为维护数据库的完整性，DBMS必须提供一种机制来检查数据库中的数据，看其是否满足语义规定的条件。这些加在数据库数据之上的语义约束条件称为数据库完整性约束条件，它们作为模式的一部分存入数据库中。而DBMS中检查数据是否满足完整性条件的机制称为完整性检查。

完整性约束条件作用的对象可以是关系、元组、列三种。其中列约束主要是列的类型、取值范围、精度、排序等约束条件。元组的约束是元组中各个字段间的联系的约束。关系的约束是若干元组间、关系集合上以及关系之间的联系的约束。

完整性约束条件涉及的这三类对象，其状态可以是静态的，也可以是动态的。所谓静态约束是指数据库每一确定状态时的数据对象所应满足的约束条件，它是反应数据库状态合理性的约束，这是最重要的一类完整性约束。动态约束是指数据库从一种状态转变为另一种状态时，新旧值之间所应满足的约束条件，它是反映数据库状态变迁的约束。

一，静态列级约束
静态列级约束是对一个列的取值域的说明，包括以下几个方面：
1，对数据类型的约束(包括数据的类型、长度、单位、精度等)
2，对数据格式的约束
3，对取值范围或取值集合的约束
4，对空值的约束
5，其他约束

二，静态元组约束
一个元组是由若干个列值组成的，静态元组约束就是规定元组的各个列之间的约束关系。例如规定发货量不得超过存货量。

四，动态列级约束
动态列级约束是修改列定义或列值时应满足的约束条件，包括下面两方面：
1，修改列定义时的约束
如将允许空值的列改为不允许空值时，如果该列目前已存在空值，则拒绝这种修改。
2，修改列值时的约束
修改列值有时需要参照其旧值，并且新旧值之间需要满足某种约束条件。例如学生年龄只能增长。



约束（constraint）用于限定可以插入表的数据，可以在创建表时规定约束（通过CREATE TABLE语句）或者在表创建之后添加约束（通过ALTER TABLE语句）。主要有以下几种约束：
NOT NULL、UNIQUE、PRIMARY KEY、FOREIGN KEY、DEFAULT、CHECK。

NOT NULL约束强制规定列不接受NULL值，如果不向列添加值，就无法插入新纪录或者更新记录。

UNIQUE约束强制规定列不可有重复值，必须是唯一标识。PRIMARY KEY拥有自动定义的UNIQUE约束，每个表可以有多个UNIQUE约束，但只可以有一个PRIMARY KEY约束。

在表创建时加入UNIQUE约束

CREATE TABLE my_table (
	id INT NOT NULL UNIQUE
)

如果需要命名UNIQUE约束，或者为多个列定义UNIQUE约束，可以使用如下方式：

CREATE TABLE my_table (
	id INT NOT NULL,
	name VARCHAR(100) NOT NULL,
	CONSTRAINT c_unique_id_name UNIQUE(id,name)
)


表创建后加入UNIQUE约束

ALTER TABLE my_table ADD UNIQUE(id);

如果需要命名UNIQUE约束，或者为多个列定义UNIQUE约束，可以使用如下方式：

ALTER TABLE my_table ADD CONSTRAINT c_unique_id_name UNIQUE(id,name);


PRIMARY KEY和FOREIGN KEY的使用方式和UNIQUE类似，只是约束使用的关键字不同。下面以外键约束为例：

外键（foreign key）是表中的某一列，它引用到另一个表的主键。这个主键被称为父键，主键所在的表被称为父表。

外键能用于确认一张表中的行与另一张表中的行相对应，外键值可以是NULL（表示父表中没有相符的主键），不需要唯一。
创建外键作为表的约束提供了明确的优势，如果违反了规则，约束会阻止我们意外破坏表。插入外键列的值必须已经存在于父表的来源列中，这是引用完整性。

CREATE TABLE my_table (
	/*指定主键更快捷的方式*/
	id INT NOT NULL PRIMARY KEY,
	content VARCHAR(100) NOT NULL,
	/*外键列*/
	parent_id INT NOT NULL,
	/*外键约束*/
	CONSTRAINT my_parent_parent_id_fk 
	/*指定外键列名*/
	FOREIGN KEY(parent_id) 
	/*指定外键引用的父表和父键*/
	REFERENCES my_parent(id)
);

撤销外键约束

ALTER TABLE my_table DROP FOREIGN KEY my_parent_parent_id_fk;


主键列需要满足以下条件：
1，任意两行都不具有相同的主键值。
2，每行都必须具有一个主键值（即主键列不允许NULL值）。
3，主键列中的值不允许修改或更新。
4，主键值不能重用（如果某行被删除，它的主键不能再赋给以后的新行）。


DEFAULT约束用于向列中插入默认值，如果新纪录的某列值为NULL而该列又有默认值，那么默认值会添加到新纪录。

在表创建时加入DEFAULT约束

CREATE TABLE my_table (
	id INT NOT NULL UNIQUE,
	sex CHAR(1) DEFAULT 'F'
)

表创建后加入DEFAULT约束

ALTER TABLE my_table ALTER COLUMN sex SET DEFAULT 'F';

撤销DEFAULT约束

ALTER TABLE my_table ALTER COLUMN sex DROP DEFAULT;


CHECK约束限定了允许插入某列的值范围，它与WHERE子句都是用相同的条件表达式（注意check后面的一对小括号）。如果插入的值无法通过CHECK条件则会抛出错误信息。

如下：

CREATE TABLE my_table (
	id INT NOT NULL PRIMARY KEY,
	direction CHAR(1) CHECK( direction IN ('E','W','S','N') )
)

也可以通过ALTER语句修改表定义，为其加入约束。如下：

ALTER TABLE my_table 
	ADD CONSTRAINT c_name CHECK (direction IN ('E','W','S','N'));


撤销约束（c_name是约束名）

ALTER TABLE my_table DROP CONSTRAINT c_name;


一般来说，约束的处理比触发器快，因此在可能的时候，应该尽量使用约束。
